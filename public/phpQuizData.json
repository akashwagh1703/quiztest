{
  "PHP OOP Concepts": [
    {
      "questions": "What is OOP in PHP?",
      "options": [
        "Object Oriented Programming",
        "Object Optimized Programming",
        "Object Oriented Processing",
        "Optimized Object Programming"
      ],
      "answer": "Object Oriented Programming"
    },
    {
      "questions": "Which of these is used to define a class in PHP?",
      "options": [
        "class ClassName {}",
        "function ClassName() {}",
        "define ClassName {}",
        "object ClassName {}"
      ],
      "answer": "class ClassName {}"
    },
    {
      "questions": "Which of the following is the correct way to create an object in PHP?",
      "options": [
        "$obj = new ClassName;",
        "$obj = create ClassName;",
        "$obj = ClassName();",
        "$obj = new ClassName()"
      ],
      "answer": "$obj = new ClassName;"
    },
    {
      "questions": "What is the purpose of the __construct method in PHP?",
      "options": [
        "It is used to destruct objects",
        "It is used to initialize an object when it is created",
        "It is used to call a method in the class",
        "It is used to initialize variables"
      ],
      "answer": "It is used to initialize an object when it is created"
    },
    {
      "questions": "What is inheritance in PHP OOP?",
      "options": [
        "A class can inherit the properties and methods of another class",
        "A class cannot inherit methods",
        "A class can inherit only methods",
        "None of the above"
      ],
      "answer": "A class can inherit the properties and methods of another class"
    },
    {
      "questions": "Which visibility keyword makes properties and methods accessible only within the class?",
      "options": [
        "public",
        "private",
        "protected",
        "internal"
      ],
      "answer": "private"
    },
    {
      "questions": "What is polymorphism in PHP?",
      "options": [
        "The ability to define multiple methods with the same name in a class",
        "The ability to change the state of an object",
        "The ability to create multiple objects from a class",
        "The ability to implement multiple inheritance"
      ],
      "answer": "The ability to define multiple methods with the same name in a class"
    },
    {
      "questions": "What is an abstract class in PHP?",
      "options": [
        "A class that can be instantiated",
        "A class that cannot have abstract methods",
        "A class that can only contain abstract methods",
        "A class that cannot be instantiated"
      ],
      "answer": "A class that cannot be instantiated"
    },
    {
      "questions": "Which of these is used to call a parent class method in PHP?",
      "options": [
        "parent::methodName()",
        "this::methodName()",
        "super::methodName()",
        "base::methodName()"
      ],
      "answer": "parent::methodName()"
    },
    {
      "questions": "What is encapsulation in PHP?",
      "options": [
        "Hiding the implementation details of a class",
        "Inheriting the properties and methods of another class",
        "Allowing a class to have multiple methods with the same name",
        "Declaring a class with public methods"
      ],
      "answer": "Hiding the implementation details of a class"
    },
    {
      "questions": "Which of these is used to inherit a class in PHP?",
      "options": [
        "extends",
        "implements",
        "inherit",
        "copy"
      ],
      "answer": "extends"
    },
    {
      "questions": "What is a constructor in PHP?",
      "options": [
        "A method that initializes the class",
        "A method that destroys the class",
        "A method that is executed when an object is destroyed",
        "A class initializer"
      ],
      "answer": "A method that initializes the class"
    },
    {
      "questions": "What keyword is used to define a constant in PHP?",
      "options": [
        "define",
        "constant",
        "const",
        "var"
      ],
      "answer": "const"
    },
    {
      "questions": "Which function is used to get the parent class in PHP?",
      "options": [
        "parent_class()",
        "get_parent_class()",
        "getClass()",
        "parent()"
      ],
      "answer": "get_parent_class()"
    },
    {
      "questions": "How can you prevent a class from being inherited in PHP?",
      "options": [
        "By using the 'final' keyword",
        "By using the 'static' keyword",
        "By using the 'abstract' keyword",
        "By using the 'private' keyword"
      ],
      "answer": "By using the 'final' keyword"
    },
    {
      "questions": "What is the difference between `public`, `private`, and `protected` visibility in PHP?",
      "options": [
        "Public is accessible everywhere, private is only accessible within the class, protected is accessible within the class and subclasses",
        "Public is accessible only within the class, private is accessible everywhere, protected is for internal use only",
        "Private is accessible everywhere, public is accessible only in the parent class",
        "None of the above"
      ],
      "answer": "Public is accessible everywhere, private is only accessible within the class, protected is accessible within the class and subclasses"
    },
    {
      "questions": "What is method overloading in PHP?",
      "options": [
        "Defining a method with the same name but different parameters",
        "Changing the visibility of a method",
        "Creating methods for different types of objects",
        "Calling methods from multiple classes"
      ],
      "answer": "Defining a method with the same name but different parameters"
    },
    {
      "questions": "What is method overriding in PHP?",
      "options": [
        "Changing the implementation of a method inherited from the parent class",
        "Calling a method from a different class",
        "Using the same method name in the parent and child class",
        "None of the above"
      ],
      "answer": "Changing the implementation of a method inherited from the parent class"
    },
    {
      "questions": "What is the purpose of `self::` in PHP?",
      "options": [
        "To access static properties and methods within the class",
        "To access the parent class",
        "To create a new instance of the class",
        "To access instance properties"
      ],
      "answer": "To access static properties and methods within the class"
    },
    {
      "questions": "How can you prevent a method from being overridden in PHP?",
      "options": [
        "By using the `final` keyword",
        "By using the `static` keyword",
        "By using the `public` keyword",
        "By using the `protected` keyword"
      ],
      "answer": "By using the `final` keyword"
    },
    {
      "questions": "What is a `static` method in PHP?",
      "options": [
        "A method that is called without an instance of the class",
        "A method that can only be accessed by the class itself",
        "A method that is used for database connections",
        "A method that is inherited from the parent class"
      ],
      "answer": "A method that is called without an instance of the class"
    },
    {
      "questions": "What does `__get()` method do in PHP?",
      "options": [
        "It is called when an undefined property is accessed",
        "It defines getter methods for class properties",
        "It is called when an undefined method is called",
        "It defines class properties"
      ],
      "answer": "It is called when an undefined property is accessed"
    },
    {
      "questions": "What does `__set()` method do in PHP?",
      "options": [
        "It is called when an undefined property is set",
        "It sets the visibility of a property",
        "It is called when an undefined method is called",
        "It sets static properties"
      ],
      "answer": "It is called when an undefined property is set"
    },
    {
      "questions": "Which of these methods is called when an object is destroyed in PHP?",
      "options": [
        "__destroy()",
        "__close()",
        "__destruct()",
        "__delete()"
      ],
      "answer": "__destruct()"
    },
    {
      "questions": "Which of these is the correct way to access an inherited property in PHP?",
      "options": [
        "parent::property",
        "$this->property",
        "self::property",
        "$parent->property"
      ],
      "answer": "parent::property"
    },
    {
      "questions": "What is the difference between `is_a()` and `instanceof` in PHP?",
      "options": [
        "Both are used to check if an object is an instance of a class",
        "`is_a()` is used for checking interface implementation, `instanceof` is used for class inheritance",
        "`instanceof` is used for checking interface implementation, `is_a()` is used for class inheritance",
        "Both are used to check the object type in PHP"
      ],
      "answer": "Both are used to check if an object is an instance of a class"
    },
    {
      "questions": "Which of these is used to define an interface in PHP?",
      "options": [
        "interface InterfaceName {}",
        "class InterfaceName {}",
        "define InterfaceName {}",
        "interface = InterfaceName {}"
      ],
      "answer": "interface InterfaceName {}"
    },
    {
      "questions": "Which of these is used to make a class implement an interface in PHP?",
      "options": [
        "implements",
        "extends",
        "interface",
        "class"
      ],
      "answer": "implements"
    },
    {
      "questions": "What does the `__autoload()` function do in PHP?",
      "options": [
        "It automatically loads classes when they are used",
        "It automatically loads the constructor method",
        "It loads the global functions",
        "It loads the configuration file"
      ],
      "answer": "It automatically loads classes when they are used"
    },
    {
      "questions": "Which of the following is not a type of class constant in PHP?",
      "options": [
        "Public constants",
        "Protected constants",
        "Private constants",
        "Static constants"
      ],
      "answer": "Static constants"
    },
    {
      "questions": "Which of the following is correct for using `__clone()` method in PHP?",
      "options": [
        "It is used to clone objects",
        "It is used to clone classes",
        "It is used to clone an instance method",
        "It is used to copy a class property"
      ],
      "answer": "It is used to clone objects"
    },
    {
      "questions": "Which of the following is the correct way to declare a class constant in PHP?",
      "options": [
        "const CONSTANT_NAME = value;",
        "public constant CONSTANT_NAME = value;",
        "private constant CONSTANT_NAME = value;",
        "define('CONSTANT_NAME', value);"
      ],
      "answer": "const CONSTANT_NAME = value;"
    }
  ]
}