{
    "Basic Backend Development": [
        {
            "questions": "What is Laravel?",
            "options": [
                "A PHP framework for web applications",
                "A JavaScript library",
                "A database management system",
                "A CSS framework"
            ],
            "answer": "A PHP framework for web applications"
        },
        {
            "questions": "What is CodeIgniter?",
            "options": [
                "A lightweight PHP framework",
                "A frontend library",
                "A Python framework",
                "A database language"
            ],
            "answer": "A lightweight PHP framework"
        },
        {
            "questions": "What does MVC stand for?",
            "options": [
                "Model View Controller",
                "Module View Code",
                "Main Virtual Code",
                "Model Variable Controller"
            ],
            "answer": "Model View Controller"
        },
        {
            "questions": "What is a controller in MVC?",
            "options": [
                "Handles the business logic",
                "Defines the database structure",
                "Manages the application styling",
                "Represents the user interface"
            ],
            "answer": "Handles the business logic"
        }
    ],
    "Advance Backend Development": [
        {
            "questions": "What is the key difference between Laravel and CodeIgniter?",
            "options": [
                "Laravel has built-in ORM (Eloquent), CodeIgniter does not",
                "CodeIgniter supports MVC strictly, Laravel does not",
                "Laravel is lightweight compared to CodeIgniter",
                "CodeIgniter is suitable for large-scale projects, unlike Laravel"
            ],
            "answer": "Laravel has built-in ORM (Eloquent), CodeIgniter does not"
        },
        {
            "questions": "Which file is used to define routes for a RESTful API in Laravel?",
            "options": [
                "routes/web.php",
                "routes/api.php",
                "config/routes.php",
                "routes/console.php"
            ],
            "answer": "routes/api.php"
        },
        {
            "questions": "Which tool is commonly used for debugging Laravel applications?",
            "options": [
                "Laravel Debugbar",
                "Xdebug",
                "Blackfire",
                "All of the above"
            ],
            "answer": "All of the above"
        },
        {
            "questions": "What is the purpose of the `php artisan` command in Laravel?",
            "options": [
                "To generate code, manage migrations, and run commands",
                "To compile PHP code",
                "To create a database",
                "To install Laravel"
            ],
            "answer": "To generate code, manage migrations, and run commands"
        },
        {
            "questions": "Which of these is a design pattern commonly used in Laravel?",
            "options": [
                "MVC (Model-View-Controller)",
                "Decorator Pattern",
                "Singleton Pattern",
                "Factory Pattern"
            ],
            "answer": "MVC (Model-View-Controller)"
        },
        {
            "questions": "How do you define a route in Laravel?",
            "options": [
                "Route::get('uri', 'Controller@method');",
                "route('uri', 'method@Controller');",
                "router.get('uri', 'method');",
                "Route.get('uri', method);"
            ],
            "answer": "Route::get('uri', 'Controller@method');"
        },
        {
            "questions": "How do you pass data to a view in Laravel?",
            "options": [
                "return view('viewname', ['key' => 'value']);",
                "view('viewname')->with(['key' => 'value']);",
                "render('viewname', ['key' => 'value']);",
                "All of the above"
            ],
            "answer": "All of the above"
        },
        {
            "questions": "What is the equivalent of Laravelâ€™s Eloquent ORM in CodeIgniter?",
            "options": [
                "Query Builder",
                "Active Record",
                "Repository Pattern",
                "None of the above"
            ],
            "answer": "Active Record"
        },
        {
            "questions": "How do you load a model in CodeIgniter?",
            "options": [
                "$this->load->model('ModelName');",
                "$this->model('ModelName');",
                "$this->load_model('ModelName');",
                "$this->Model('ModelName');"
            ],
            "answer": "$this->load->model('ModelName');"
        }
    ],
    "Basic Frontend Development": [
        {
            "questions": "What is React.js?",
            "options": [
                "A JavaScript library for building user interfaces",
                "A backend framework",
                "A CSS preprocessor",
                "A database tool"
            ],
            "answer": "A JavaScript library for building user interfaces"
        },
        {
            "questions": "What is JSX in React?",
            "options": [
                "A syntax extension for JavaScript",
                "A CSS framework",
                "A type of React hook",
                "A database query language"
            ],
            "answer": "A syntax extension for JavaScript"
        },
        {
            "questions": "What is a component in React?",
            "options": [
                "Reusable building block in a React application",
                "A database connection",
                "A styling element",
                "A deployment tool"
            ],
            "answer": "Reusable building block in a React application"
        },
        {
            "questions": "What is the purpose of `useState` in React?",
            "options": [
                "To manage state in a functional component",
                "To fetch data from an API",
                "To handle routing",
                "To add CSS styles"
            ],
            "answer": "To manage state in a functional component"
        }
    ],
    "Advance Frontend Development": [
        {
            "questions": "What is the main advantage of Next.js over React.js?",
            "options": [
                "Server-Side Rendering and static site generation",
                "Simpler syntax compared to React.js",
                "No need for additional libraries",
                "It is purely a library for building UIs"
            ],
            "answer": "Server-Side Rendering and static site generation"
        },
        {
            "questions": "Which library is best suited for smooth animations in React?",
            "options": [
                "Framer Motion",
                "React Spring",
                "GSAP",
                "All of the above"
            ],
            "answer": "All of the above"
        },
        {
            "questions": "How can you implement Server-Side Rendering (SSR) in Next.js?",
            "options": [
                "Using getServerSideProps",
                "Using Context API",
                "Using Redux",
                "Using useEffect"
            ],
            "answer": "Using getServerSideProps"
        },
        {
            "questions": "Which lifecycle method is used in React to fetch data after a component mounts?",
            "options": [
                "componentDidMount",
                "render",
                "useEffect",
                "componentWillMount"
            ],
            "answer": "componentDidMount"
        },
        {
            "questions": "What is a key benefit of using Framer Motion for animations?",
            "options": [
                "Easy-to-use declarative syntax",
                "Works with static HTML only",
                "Replaces CSS animations completely",
                "Requires no installation"
            ],
            "answer": "Easy-to-use declarative syntax"
        },
        {
            "questions": "What is the difference between state and props in React.js?",
            "options": [
                "State is mutable, props are immutable",
                "State is immutable, props are mutable",
                "State is used for child components, props for parent components",
                "State and props are the same in React"
            ],
            "answer": "State is mutable, props are immutable"
        },
        {
            "questions": "How do you use a functional component with React hooks?",
            "options": [
                "const [state, setState] = useState(initialValue);",
                "function MyComponent() {}",
                "state = useState(initialValue);",
                "const state = setState(initialValue);"
            ],
            "answer": "const [state, setState] = useState(initialValue);"
        },
        {
            "questions": "How do you handle routing in a React application?",
            "options": [
                "Using the React Router library",
                "By creating custom routing logic",
                "Using HTML anchors and refreshing the page",
                "By installing Redux"
            ],
            "answer": "Using the React Router library"
        },
        {
            "questions": "How do you make an API call in React?",
            "options": [
                "Using fetch or axios",
                "Using useEffect",
                "Using async/await",
                "All of the above"
            ],
            "answer": "All of the above"
        }
    ],
    "Basic API Integration": [
        {
            "questions": "What is an API?",
            "options": [
                "Application Programming Interface",
                "Advanced Programming Interaction",
                "Application Processing Integration",
                "Automated Programming Interface"
            ],
            "answer": "Application Programming Interface"
        },
        {
            "questions": "What does REST stand for?",
            "options": [
                "Representational State Transfer",
                "Random State Transfer",
                "Resource Server Transfer",
                "Remote Service Tool"
            ],
            "answer": "Representational State Transfer"
        },
        {
            "questions": "What does HTTP 404 status code mean?",
            "options": [
                "Resource not found",
                "Server error",
                "Success",
                "Bad request"
            ],
            "answer": "Resource not found"
        },
        {
            "questions": "Which format is commonly used to exchange API data?",
            "options": [
                "JSON",
                "XML",
                "Both JSON and XML",
                "CSV"
            ],
            "answer": "Both JSON and XML"
        }
    ],
    "Advance API Integration": [
        {
            "questions": "What is the purpose of using environment variables for API keys?",
            "options": [
                "To secure API keys from being exposed in the codebase",
                "To speed up API requests",
                "To allow rate limiting",
                "To handle API errors more effectively"
            ],
            "answer": "To secure API keys from being exposed in the codebase"
        },
        {
            "questions": "Which tool is commonly used to test APIs?",
            "options": [
                "Postman",
                "Xdebug",
                "Laravel Debugbar",
                "Telescope"
            ],
            "answer": "Postman"
        },
        {
            "questions": "What is the HTTP status code for a bad request?",
            "options": [
                "400",
                "200",
                "500",
                "404"
            ],
            "answer": "400"
        },
        {
            "questions": "What is the main advantage of using GraphQL over REST?",
            "options": [
                "Fetches only the required data",
                "Faster response times",
                "Easier error handling",
                "Better authentication"
            ],
            "answer": "Fetches only the required data"
        },
        {
            "questions": "How do you secure an API using Laravel Passport?",
            "options": [
                "By generating OAuth2 tokens",
                "By enabling HTTPS",
                "By using API keys",
                "By using middleware"
            ],
            "answer": "By generating OAuth2 tokens"
        },
        {
            "questions": "Which HTTP method is commonly used for creating new resources?",
            "options": [
                "POST",
                "GET",
                "PUT",
                "DELETE"
            ],
            "answer": "POST"
        },
        {
            "questions": "What is the purpose of the `Content-Type` header in an API request?",
            "options": [
                "Specifies the media type of the request body",
                "Sets the authentication type",
                "Defines the response format",
                "Encrypts the request body"
            ],
            "answer": "Specifies the media type of the request body"
        },
        {
            "questions": "What status code indicates a successful API request?",
            "options": [
                "200",
                "400",
                "500",
                "401"
            ],
            "answer": "200"
        },
        {
            "questions": "How do you test an API endpoint?",
            "options": [
                "Use tools like Postman or cURL",
                "Write integration tests",
                "Use Swagger documentation",
                "All of the above"
            ],
            "answer": "All of the above"
        }
    ],
    "Basic Databases": [
        {
            "questions": "What is MySQL?",
            "options": [
                "A relational database management system",
                "A frontend framework",
                "A programming language",
                "A JavaScript library"
            ],
            "answer": "A relational database management system"
        },
        {
            "questions": "What is a primary key in MySQL?",
            "options": [
                "A unique identifier for each record in a table",
                "A column used for foreign relationships",
                "A style attribute in CSS",
                "A special JavaScript variable"
            ],
            "answer": "A unique identifier for each record in a table"
        },
        {
            "questions": "What is the purpose of the SELECT statement?",
            "options": [
                "To fetch data from a database",
                "To update a database record",
                "To create a new table",
                "To delete a table"
            ],
            "answer": "To fetch data from a database"
        },
        {
            "questions": "What does the WHERE clause do in SQL?",
            "options": [
                "Filters records based on conditions",
                "Specifies the columns to display",
                "Sorts the query results",
                "Defines the table structure"
            ],
            "answer": "Filters records based on conditions"
        }
    ],
    "Advance Databases": [
        {
            "questions": "Which practice helps optimize database queries?",
            "options": [
                "Use indexes",
                "Avoid SELECT *",
                "Reduce nested queries",
                "All of the above"
            ],
            "answer": "All of the above"
        },
        {
            "questions": "What is the primary purpose of normalizing a database schema?",
            "options": [
                "To avoid redundancy",
                "To improve read performance",
                "To simplify queries",
                "To add more tables"
            ],
            "answer": "To avoid redundancy"
        },
        {
            "questions": "Which of these is an optimized SQL query?",
            "options": [
                "SELECT name, age FROM users WHERE age > 30 ORDER BY age DESC LIMIT 5",
                "SELECT * FROM users ORDER BY age DESC",
                "SELECT name FROM users",
                "SELECT * FROM users WHERE age > 30"
            ],
            "answer": "SELECT name, age FROM users WHERE age > 30 ORDER BY age DESC LIMIT 5"
        },
        {
            "questions": "What is database sharding?",
            "options": [
                "Partitioning data across multiple databases",
                "Creating backups of a database",
                "Normalizing database tables",
                "Creating read replicas"
            ],
            "answer": "Partitioning data across multiple databases"
        },
        {
            "questions": "Which database engine is optimized for read-heavy operations?",
            "options": [
                "MyISAM",
                "InnoDB",
                "SQLite",
                "PostgreSQL"
            ],
            "answer": "MyISAM"
        },
        {
            "questions": "How do you fetch data from a MySQL database?",
            "options": [
                "SELECT * FROM table_name;",
                "FETCH ALL FROM table_name;",
                "GET ALL FROM table_name;",
                "RETRIEVE FROM table_name;"
            ],
            "answer": "SELECT * FROM table_name;"
        },
        {
            "questions": "How do you create a new table in MySQL?",
            "options": [
                "CREATE TABLE table_name (columns);",
                "NEW TABLE table_name (columns);",
                "DEFINE TABLE table_name (columns);",
                "ADD TABLE table_name (columns);"
            ],
            "answer": "CREATE TABLE table_name (columns);"
        },
        {
            "questions": "How do you join two tables in MySQL?",
            "options": [
                "Using JOIN clause",
                "Using UNION clause",
                "Using MERGE clause",
                "Using SELECT clause"
            ],
            "answer": "Using JOIN clause"
        },
        {
            "questions": "How do you update data in a table?",
            "options": [
                "UPDATE table_name SET column=value WHERE condition;",
                "MODIFY table_name SET column=value WHERE condition;",
                "CHANGE table_name SET column=value;",
                "ALTER table_name SET column=value;"
            ],
            "answer": "UPDATE table_name SET column=value WHERE condition;"
        }
    ],
    "WordPress": [
        {
            "questions": "Which plugin can be used to optimize images in WordPress?",
            "options": [
                "Smush",
                "Yoast SEO",
                "W3 Total Cache",
                "Jetpack"
            ],
            "answer": "Smush"
        },
        {
            "questions": "How can you create a custom plugin in WordPress?",
            "options": [
                "Create a folder in /wp-content/plugins/ and add a PHP file with a plugin header comment",
                "Edit the functions.php file directly",
                "Create a new theme with a custom functionality",
                "Install a plugin development tool from WordPress dashboard"
            ],
            "answer": "Create a folder in /wp-content/plugins/ and add a PHP file with a plugin header comment"
        },
        {
            "questions": "Which of the following is NOT a WordPress optimization tip?",
            "options": [
                "Lazy-load images",
                "Enable Gzip compression",
                "Use SELECT * in database queries",
                "Use a CDN"
            ],
            "answer": "Use SELECT * in database queries"
        },
        {
            "questions": "Which WordPress file is primarily used to handle requests?",
            "options": [
                "index.php",
                "functions.php",
                "wp-config.php",
                "style.css"
            ],
            "answer": "index.php"
        },
        {
            "questions": "How can you ensure the security of a custom WordPress plugin?",
            "options": [
                "Sanitize and validate input",
                "Use nonces for form submissions",
                "Escape output data",
                "All of the above"
            ],
            "answer": "All of the above"
        }
    ],
    "Leadership and Team Management": [
        {
            "questions": "Which methodology is commonly used to prioritize tasks?",
            "options": [
                "Scrum",
                "Kanban",
                "Waterfall",
                "Both Scrum and Kanban"
            ],
            "answer": "Both Scrum and Kanban"
        },
        {
            "questions": "What is an effective way to mentor junior developers?",
            "options": [
                "Conduct code reviews and provide constructive feedback",
                "Assign tasks without supervision",
                "Avoid regular feedback to let them work independently",
                "Focus only on individual work without collaboration"
            ],
            "answer": "Conduct code reviews and provide constructive feedback"
        },
        {
            "questions": "How should conflicts within a team be handled?",
            "options": [
                "Focus on facts and mediate discussions",
                "Avoid the issue and let it resolve naturally",
                "Take sides based on personal preference",
                "Involve only one party in the discussion"
            ],
            "answer": "Focus on facts and mediate discussions"
        },
        {
            "questions": "Which is a key principle of Agile development?",
            "options": [
                "Individuals and interactions over processes and tools",
                "Detailed documentation over collaboration",
                "Following a strict plan over responding to change",
                "Working software over responding to customer feedback"
            ],
            "answer": "Individuals and interactions over processes and tools"
        },
        {
            "questions": "What is the purpose of conducting daily stand-up meetings?",
            "options": [
                "To review progress, identify blockers, and plan tasks for the day",
                "To conduct a full project review",
                "To assign tasks without discussion",
                "To track the time spent by each developer"
            ],
            "answer": "To review progress, identify blockers, and plan tasks for the day"
        }
    ]
}