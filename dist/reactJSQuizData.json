{
  "React Basics": [
    {
      "questions": "React is a:",
      "options": [
        "Framework",
        "Library",
        "Programming Language",
        "Database"
      ],
      "answer": "Library"
    },
    {
      "questions": "What is the Virtual DOM in React?",
      "options": [
        "A direct copy of the browser DOM",
        "A lightweight representation of the real DOM that is used for efficient updates",
        "A feature of JavaScript",
        "A debugging tool"
      ],
      "answer": "A lightweight representation of the real DOM that is used for efficient updates"
    },
    {
      "questions": "Which of these is NOT a React feature?",
      "options": [
        "One-way data binding",
        "Server-side rendering",
        "Built-in database management",
        "Component-based architecture"
      ],
      "answer": "Built-in database management"
    },
    {
      "questions": "What is JSX?",
      "options": [
        "A new programming language",
        "A JavaScript syntax extension for writing HTML within JavaScript",
        "A CSS preprocessor",
        "A React lifecycle method"
      ],
      "answer": "A JavaScript syntax extension for writing HTML within JavaScript"
    },
    {
      "questions": "How does React update the DOM?",
      "options": [
        "Directly updates the browser DOM",
        "Uses the Virtual DOM to determine the minimal updates needed for the real DOM",
        "Updates the DOM via AJAX",
        "None of the above"
      ],
      "answer": "Uses the Virtual DOM to determine the minimal updates needed for the real DOM"
    }
  ],
  "Node.js and npm": [
    {
      "questions": "Node.js is primarily used for:",
      "options": [
        "Front-end development",
        "Back-end development",
        "Styling web pages",
        "Managing databases"
      ],
      "answer": "Back-end development"
    },
    {
      "questions": "What is the purpose of npm?",
      "options": [
        "To build React components",
        "To manage JavaScript package dependencies",
        "To execute server-side scripts",
        "To compile JavaScript"
      ],
      "answer": "To manage JavaScript package dependencies"
    },
    {
      "questions": "How do you initialize a new npm project?",
      "options": [
        "npm start",
        "npm init",
        "npm install",
        "npm create"
      ],
      "answer": "npm init"
    },
    {
      "questions": "What is the default entry point for a Node.js application?",
      "options": [
        "index.html",
        "index.js",
        "main.css",
        "app.js"
      ],
      "answer": "index.js"
    },
    {
      "questions": "Which command installs React in a project?",
      "options": [
        "npm start react",
        "npm install react",
        "npm setup react",
        "npm build react"
      ],
      "answer": "npm install react"
    }
  ],
  "React Project Setup": [
    {
      "questions": "Which command creates a new React project using Create React App?",
      "options": [
        "npm create-react-app",
        "npx create-react-app my-app",
        "npm react-create my-app",
        "npx react-setup my-app"
      ],
      "answer": "npx create-react-app my-app"
    },
    {
      "questions": "What is the purpose of App.js in a React project?",
      "options": [
        "It configures Webpack",
        "It is the main component that acts as the root of the component tree",
        "It defines the HTML structure",
        "It handles all network requests"
      ],
      "answer": "It is the main component that acts as the root of the component tree"
    },
    {
      "questions": "In CRA, where is the application rendered in the DOM?",
      "options": [
        "<div id='root'></div> in index.html",
        "<body> in index.html",
        "<head> in index.html",
        "<main> in App.js"
      ],
      "answer": "<div id='root'></div> in index.html"
    },
    {
      "questions": "What is the purpose of the src folder in a React project?",
      "options": [
        "Contains static files like images",
        "Contains application source code",
        "Stores environment variables",
        "Handles third-party dependencies"
      ],
      "answer": "Contains application source code"
    },
    {
      "questions": "Which file is used as the entry point for a React app created with CRA?",
      "options": [
        "index.html",
        "App.js",
        "index.js",
        "main.js"
      ],
      "answer": "index.js"
    }
  ],
  "Functional Components and Props": [
    {
      "questions": "What is a React component?",
      "options": [
        "A function or class that accepts input and returns a UI element",
        "A styling template",
        "A Webpack configuration file",
        "A lifecycle method"
      ],
      "answer": "A function or class that accepts input and returns a UI element"
    },
    {
      "questions": "What is the correct syntax for a functional component?",
      "options": [
        "const Component = () => <div>Hello</div>;",
        "function Component() { return <div>Hello</div>; }",
        "Both a and b",
        "None of the above"
      ],
      "answer": "Both a and b"
    },
    {
      "questions": "Which keyword is used to pass data to a child component?",
      "options": [
        "state",
        "props",
        "data",
        "componentDidMount"
      ],
      "answer": "props"
    },
    {
      "questions": "How do you pass props to a component?",
      "options": [
        "<Component propName={value} />",
        "<Component.props.propName=value />",
        "props.Component(value)",
        "None of the above"
      ],
      "answer": "<Component propName={value} />"
    },
    {
      "questions": "What is props.children?",
      "options": [
        "A method to pass a child component",
        "A reserved prop that contains the content inside the component's opening and closing tags",
        "A lifecycle method for rendering child components",
        "A hook for child components"
      ],
      "answer": "A reserved prop that contains the content inside the component's opening and closing tags"
    }
  ],
  "State and Hooks": [
    {
      "questions": "What is the purpose of useState in React?",
      "options": [
        "To handle side effects",
        "To manage component state",
        "To replace Redux",
        "To fetch data from APIs"
      ],
      "answer": "To manage component state"
    },
    {
      "questions": "What does the useState hook return?",
      "options": [
        "A single variable",
        "An array with a state value and a function to update it",
        "A function to initialize state",
        "A promise resolving to the state value"
      ],
      "answer": "An array with a state value and a function to update it"
    },
    {
      "questions": "How do you initialize a state variable using useState?",
      "options": [
        "const [state, setState] = useState(initialValue);",
        "const state = useState(initialValue);",
        "const [state] = useState(initialValue);",
        "useState(state, setState);"
      ],
      "answer": "const [state, setState] = useState(initialValue);"
    },
    {
      "questions": "What are the rules of hooks?",
      "options": [
        "Call hooks only inside loops",
        "Call hooks at the top level of a component",
        "Call hooks inside conditionals",
        "Call hooks outside React components"
      ],
      "answer": "Call hooks at the top level of a component"
    },
    {
      "questions": "Which hook is used for side effects?",
      "options": [
        "useState",
        "useEffect",
        "useContext",
        "useReducer"
      ],
      "answer": "useEffect"
    },
    {
      "questions": "How do you trigger an effect only once after mounting?",
      "options": [
        "Pass an empty dependency array [] to useEffect",
        "Use componentDidMount instead",
        "Do not use any dependency",
        "Call useEffect inside a conditional"
      ],
      "answer": "Pass an empty dependency array [] to useEffect"
    },
    {
      "questions": "What is the difference between useState and useReducer?",
      "options": [
        "useState is for local state management, while useReducer is for complex state logic",
        "useState is synchronous, and useReducer is asynchronous",
        "useReducer cannot handle state objects",
        "There is no difference"
      ],
      "answer": "useState is for local state management, while useReducer is for complex state logic"
    },
    {
      "questions": "What does React.memo do?",
      "options": [
        "Prevents unnecessary re-renders of functional components",
        "Memoizes a state variable",
        "Optimizes Redux reducers",
        "Handles errors in components"
      ],
      "answer": "Prevents unnecessary re-renders of functional components"
    },
    {
      "questions": "What is useMemo used for?",
      "options": [
        "To optimize expensive calculations by memoizing them",
        "To memoize state updates",
        "To prevent re-renders of class components",
        "To manage component hierarchy"
      ],
      "answer": "To optimize expensive calculations by memoizing them"
    },
    {
      "questions": "What does useRef return?",
      "options": [
        "An object with a current property",
        "A DOM element",
        "A state variable",
        "A Redux action"
      ],
      "answer": "An object with a current property"
    }
  ]
}